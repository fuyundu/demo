一、什么是Lambda表达式？
可以把Lambda表达式理解为简洁地表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。

匿名——它不像普通的方法那样有一个明确的名称

函数——和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表

传递——Lambda表达式可以作为参数传递给方法或存储在变量中

简洁——无需像匿名类那样写很多模板代码

lambda:可以简洁地表示可传递的匿名函数的一种方式

因为Lambda的引入，集合操作也得到了极大的改善。
比如，引入stream API，把map、reduce、filter这样的基本函数式编程的概念与Java集合结合起来。
在大多数情况下，处理集合时，Java程序员可以告别for、while、if这些语句。

随之而来的是，map、reduce、filter等操作都可以并行化，在一些条件下，可以提升性能。

参数可以是零个或多个
参数类型可指定，可省略（根据表达式上下文推断）
参数包含在圆括号中，用逗号分隔
表达式主体可以是零条或多条语句,包含在花括号中
表达式主体只有一条语句时，花括号可省略
表达式主体有一条以上语句时，表达式的返回类型与代码块的返回类型一致
表达式只有一条语句时，表达式的返回类型与该语句的返回类型一致

//零个
()-> System.out.println("no argument");

//一个
x->x+1

//两个
(x,y)->x+y


//返回类型是表达式主体语句的返回类型int
(int x)->x+1

//表达式中有多条语句
(Apple appple) -> {
System.out.println(apple.getWeight());
System.out.println(apple.getColor());
}
